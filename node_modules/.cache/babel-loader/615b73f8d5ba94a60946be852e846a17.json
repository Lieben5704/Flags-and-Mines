{"ast":null,"code":"var _jsxFileName = \"J:\\\\capstoneProject3-main (1)\\\\capstoneProject3-main (1)\\\\Flags_Mines\\\\src\\\\Components\\\\GameStatus.js\";\nimport React from 'react';\n\n// Import react bootstrap button\nimport Button from \"react-bootstrap/Button\";\n\n/*I used multiple github repositories as well as videos and google to help me with this project. Most sources had the same basic structure,\n but the way they impimented the functions etc. was a bit confusing. I did my best to re-create this in a way that made sense to me and that met all the task requirments\n \n Helpfull links \n https://www.youtube.com/watch?v=5Xew--ycx0o&ab_channel=Academind\n */\n\n//Let the user know if they won or lost the game\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass WonOrLost extends React.Component {\n  constructor(props) {\n    super(props);\n\n    //Initial state variables\n    this.state = {\n      gameStatus: \"new game\",\n      createdArray: false,\n      Blocks: [{\n        id: 0,\n        blockStatus: \"normal\",\n        mineStatus: false,\n        flagStatus: false,\n        numberHint: 0\n      }]\n    };\n\n    //Binding to ensure that \"this\" works\n    this.messageExists = this.messageExists.bind(this);\n    this.reset = this.reset.bind(this);\n    this.restartButton = this.restartButton.bind(this);\n    this.displayOrNot = this.displayOrNot.bind(this);\n  }\n  messageExists(message) {\n    //determine the game status, display message if won or lost, else do nothing\n    if (message !== \"On Going\" && message !== \"new game\") {\n      if (message === \"Game Over!\") {\n        return /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"lost\",\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 24\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"won\",\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 24\n        }, this);\n      }\n    }\n  }\n  reset(Blocks) {\n    //Clone of main Blocks\n    let array = Blocks.slice();\n\n    //Reset values\n    for (let i = 0; i <= 81; i++) {\n      if (array[i].blockStatus === \"exposed\") {\n        array[i].blockStatus = \"normal\";\n      }\n      if (array[i].flagStatus === true) {\n        array[i].flagStatus = false;\n      }\n    }\n\n    //Set Blocks to default values\n    this.setState({\n      Blocks: array\n    }, () => {\n      console.log(\"won or lost message is currently: \" + this.state.gameStatus);\n      this.props.resetGame(this.state.Blocks, this.state.gameStatus); //Call resetGame\n    });\n  }\n\n  //Display restart game button if the game is won or lost\n  restartButton(message) {\n    if (message !== \"On Going\" && message !== \"new game\") {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        className: \"restartButton\",\n        onClick: () => this.reset(this.props.Blocks),\n        children: \"Restart game?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 20\n      }, this);\n    }\n  }\n  displayOrNot(message) {\n    if (message !== \"On Going\" && message !== \"new game\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameResult\",\n        children: [this.messageExists(message), this.restartButton(message)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 20\n      }, this);\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.displayOrNot(this.props.message)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n// Export component so it can be used by App.js\nexport default WonOrLost;","map":{"version":3,"names":["React","Button","WonOrLost","Component","constructor","props","state","gameStatus","createdArray","Blocks","id","blockStatus","mineStatus","flagStatus","numberHint","messageExists","bind","reset","restartButton","displayOrNot","message","array","slice","i","setState","console","log","resetGame","render"],"sources":["J:/capstoneProject3-main (1)/capstoneProject3-main (1)/Flags_Mines/src/Components/GameStatus.js"],"sourcesContent":["import React from 'react';\n\n// Import react bootstrap button\nimport Button from \"react-bootstrap/Button\";\n\n\n/*I used multiple github repositories as well as videos and google to help me with this project. Most sources had the same basic structure,\n but the way they impimented the functions etc. was a bit confusing. I did my best to re-create this in a way that made sense to me and that met all the task requirments\n \n Helpfull links \n https://www.youtube.com/watch?v=5Xew--ycx0o&ab_channel=Academind\n */\n\n\n//Let the user know if they won or lost the game\nclass WonOrLost extends React.Component {\n    constructor(props) {\n        super(props);\n\n        //Initial state variables\n        this.state = {\n            gameStatus: \"new game\",\n            createdArray: false,\n            Blocks: [{\n                id: 0,\n                blockStatus: \"normal\",\n                mineStatus: false,\n                flagStatus: false,\n                numberHint: 0\n            }]\n        }\n\n        //Binding to ensure that \"this\" works\n        this.messageExists = this.messageExists.bind(this);\n        this.reset = this.reset.bind(this);\n        this.restartButton = this.restartButton.bind(this);\n        this.displayOrNot = this.displayOrNot.bind(this);\n\n    }\n\n    messageExists(message) {\n        //determine the game status, display message if won or lost, else do nothing\n        if (message !== \"On Going\" && message!== \"new game\") {\n            if (message === \"Game Over!\") {\n                return <h1 className=\"lost\">{message}</h1>  \n            } else {\n                return <h1 className=\"won\">{message}</h1>  \n            }\n        }\n    }\n\n    reset(Blocks) {\n\n        //Clone of main Blocks\n        let array = Blocks.slice();\n\n        //Reset values\n        for (let i = 0; i <= 81; i++) {\n            if (array[i].blockStatus === \"exposed\") {\n                array[i].blockStatus = \"normal\";\n            } \n\n            if (array[i].flagStatus === true) {\n                array[i].flagStatus = false;\n            } \n\n        } \n\n        //Set Blocks to default values\n        this.setState({Blocks: array}, () => {\n            console.log(\"won or lost message is currently: \" + this.state.gameStatus);\n\n            this.props.resetGame(this.state.Blocks, this.state.gameStatus);//Call resetGame\n        })\n    }\n\n    //Display restart game button if the game is won or lost\n    restartButton(message) {\n        if (message !== \"On Going\" && message!== \"new game\") {\n            return <Button variant=\"primary\" className=\"restartButton\" onClick={() => this.reset(this.props.Blocks)}>Restart game?</Button>\n        }\n    } \n    \n    displayOrNot (message) {\n        if (message !== \"On Going\" && message!== \"new game\") {\n            return <div className=\"gameResult\">\n                {this.messageExists(message)}\n                {this.restartButton(message)}\n            </div>;\n        }\n    \n    }\n\n    render() {\n        return (\n            <div>\n                {this.displayOrNot(this.props.message)}\n            </div>\n        );\n    }\n}\n\n// Export component so it can be used by App.js\nexport default WonOrLost;"],"mappings":"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"},"metadata":{},"sourceType":"module"}