{"ast":null,"code":"var _jsxFileName = \"J:\\\\capstoneProject3-main (1)\\\\capstoneProject3-main (1)\\\\Flags_Mines\\\\src\\\\Components\\\\MainGame.js\";\nimport React from 'react';\n\n//Import images\nimport Flag from '../redFlag.png';\nimport Mine from '../mineImg.png';\nimport Number1 from '../number1.png';\nimport Number2 from '../number2.png';\n\n//Import components\nimport Scoreboard from './Scoreboard';\nimport GameStatus from './GameStatus';\n\n/*I used multiple github repositories as well as videos and google to help me with this project. Most sources had the same basic structure,\n but the way they impimented the functions etc. was a bit confusing. I did my best to re-create this in a way that made sense to me and that met all the task requirments*/\n\n//Create function to display game board\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MainGame extends React.Component {\n  constructor(props) {\n    super(props);\n\n    //Initial state variables\n    this.state = {\n      boardSize: 0,\n      Flags: 0,\n      Mines: 0,\n      gameScoreArray: 0,\n      gameStatus: \"On Going\",\n      createdArray: false,\n      // Blocks is an array of blocks on the board.\n      Blocks: [{\n        id: 0,\n        blockStatus: \"normal\",\n        mineStatus: false,\n        flagStatus: false,\n        numberHint: 0,\n        emptyBlockSection: 0\n      }],\n      // blockArray contains the code for each block on the game board.\n      blockArray: []\n    };\n    //Binding for each function so that \"this\" works correctly\n    this.revealedBlock = this.revealedBlock.bind(this);\n    this.placeFlag = this.placeFlag.bind(this);\n    this.newArray = this.newArray.bind(this);\n    this.displayBoard = this.displayBoard.bind(this);\n    this.getScore = this.getScore.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n    this.isNumberHint1 = this.isNumberHint1.bind(this);\n    this.isNumberHint2 = this.isNumberHint2.bind(this);\n    this.isMine = this.isMine.bind(this);\n    this.hasWon = this.hasWon.bind(this);\n    this.arraysEqual = this.arraysEqual.bind(this);\n  }\n\n  //If the clicked block has a mine, show the icon of the mine\n  isMine(index, newArray, tempArray) {\n    //Change status of block that was clicked on to \"exposed\" in temp array\n    newArray[index].blockStatus = \"exposed\";\n    tempArray[index] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"block uncovered\",\n      id: index,\n      onClick: () => this.revealedBlock(index),\n      onContextMenu: e => {\n        e.preventDefault();\n        this.placeFlag(index);\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"mine\",\n        src: Mine,\n        alt: \"Mine / bomb\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this);\n\n    //\"Game over\" message\n    let winOrLose = \"Game Over!\";\n    this.setState({\n      Blocks: newArray,\n      blockArray: tempArray,\n      gameStatus: winOrLose\n    }, () => {\n      console.log(\"blockArray and Blocks item index '\" + index + \"' updated with mine\");\n    });\n  }\n\n  //Showing number hints\n\n  isNumberHint1(index, newArray, tempArray) {\n    //Change status of block that was clicked on to \"exposed\" in temp array\n    newArray[index].blockStatus = \"exposed\";\n\n    //If clicked, show image of the \"1\"\n    tempArray[index] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"block uncovered\",\n      id: index,\n      onClick: () => this.revealedBlock(index),\n      onContextMenu: e => {\n        e.preventDefault();\n        this.placeFlag(index);\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"num1\",\n        src: Number1,\n        alt: \"number 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this);\n    this.setState({\n      blockArray: tempArray,\n      Blocks: newArray\n    }, () => console.log(\"blockArray item index '\" + index + \"' updated with number hint\"));\n  }\n  isNumberHint2(index, newArray, tempArray) {\n    //Change status of block that was clicked on to \"exposed\" in temp array\n    newArray[index].blockStatus = \"exposed\";\n\n    //If clicked, show image of the \"2\"\n    tempArray[index] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"block uncovered\",\n      id: index,\n      onClick: () => this.revealedBlock(index),\n      onContextMenu: e => {\n        e.preventDefault();\n        this.placeFlag(index);\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"num2\",\n        src: Number2,\n        alt: \"number 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this);\n    this.setState({\n      blockArray: tempArray,\n      Blocks: newArray\n    }, () => console.log(\"blockArray and Blocks item index '\" + index + \"' updated\"));\n  }\n\n  //If there is no hint under the clicked block, show blank\n  isEmptyBlock(index, newArray, tempArray) {\n    //Change status of block that was clicked on to \"exposed\" in temp array\n    newArray[index].blockStatus = \"exposed\";\n\n    //If clicked, show blank\n    tempArray[index] = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"block uncovered\",\n      id: index,\n      onClick: () => this.revealedBlock(index),\n      onContextMenu: e => {\n        e.preventDefault();\n        this.placeFlag(index);\n      },\n      children: \"\\xA0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this);\n    this.setState({\n      blockArray: tempArray,\n      Blocks: newArray\n    }, () => console.log(\"blockArray item index '\" + index + \"' updated\"));\n  }\n\n  //Exposing what is underneath a block when the user clicks on it\n\n  revealedBlock(index) {\n    //Show game status.\n    if (this.state.gameStatus === \"On Going\") {\n      // use slice() to clone Blocks (array with all info about each block)\n      let newArray = this.state.Blocks.slice();\n\n      // Use slice() to clone blockArray (array that has code for each block) to work on\n      let tempArray = this.state.blockArray.slice();\n\n      //First, check if there is a mine under the block, if not it is safe to continue\n      if (!this.state.Blocks[index].mineStatus) {\n        //Reveal what is under each block (refer to functions above)\n        if (this.state.Blocks[index].numberHint === 1) {\n          this.isNumberHint1(index, newArray, tempArray);\n        } else {\n          if (this.state.Blocks[index].numberHint === 2) {\n            this.isNumberHint2(index, newArray, tempArray);\n          } else {\n            this.isEmptyBlock(index, newArray, tempArray);\n          }\n        }\n\n        //If there is a mine under the clicked block, show the mine\n      } else {\n        this.isMine(index, newArray, tempArray);\n      }\n\n      //Update the game status to won or lost\n      this.hasWon();\n    }\n  }\n\n  /* This function checks if the 2 arrays that are passed to it as parameters are equal (have all identical values).\n  I learned this from one of the github projects i used for guidance*/\n\n  arraysEqual(array1, array2) {\n    for (let i = 0; i < array2.length; i++) {\n      if (array1[i] !== array2[i]) return false;\n    }\n    return true;\n  }\n  //Function to determine if the player has won or lost\n  hasWon() {\n    let Blocks = this.state.Blocks;\n\n    //Array with all mines\n    let arrayOfMines = [4, 9, 14, 19, 24, 29, 34, 39, 44, 49];\n\n    //Array for all blocks\n    let array = Blocks.map(item => {\n      return item.id;\n    });\n\n    //Array for all 'safe' blocks that have no mines underneath\n    let winningArrayTemplate = array.filter(item => !arrayOfMines.includes(item));\n\n    //Use pop to remove last element from array\n    winningArrayTemplate.pop();\n\n    //Array for all exposed blocks\n    let exposedBlocksArray = Blocks.filter(item => {\n      return item.blockStatus === \"exposed\";\n    });\n\n    //Only show exposed blocks in array\n    let exposedBlockIdArray = exposedBlocksArray.map(item => item.id);\n    let result = false;\n    result = this.arraysEqual(exposedBlockIdArray, winningArrayTemplate);\n    console.log(\"result of comparison is: \" + result);\n\n    // If array of exposed blocks equals winning array, show the player that they won\n    if (result === true) {\n      let msg = \"You Won the Game!\";\n      this.setState({\n        gameStatus: msg\n      }, () => {\n        console.log(\"Won or lost msg updated to: \" + this.state.gameStatus);\n      });\n    }\n  }\n\n  //Flag placement\n  placeFlag(index) {\n    //Only allow the player to keep clicking if the game status is on going \n    if (this.state.gameStatus === \"On Going\") {\n      //Temporary clone of Blcoks\n      let newArray = this.state.Blocks.slice();\n\n      //Flag status\n      newArray[index].flagStatus = true;\n\n      //Temporary clone of blockArray\n      let tempArray = this.state.blockArray.slice();\n\n      //Show flag image\n      tempArray[index] = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"block normalBlock\",\n        id: index,\n        onClick: () => this.revealedBlock(index),\n        onContextMenu: e => {\n          e.preventDefault();\n          this.placeFlag(index);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"flag\",\n          src: Flag,\n          alt: \"red flag\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this);\n      this.setState({\n        Blocks: newArray,\n        blockArray: tempArray\n      }, () => {\n        console.log(\"blockArray item index '\" + index + \"' updated with flag and Blocks updated.\");\n        this.getScore();\n      });\n    }\n  }\n\n  // Function to create array that stores the values of each block on the board.\n  newArray(side) {\n    /*Here I was getting an error that said: \n    \"Error: Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate\".\n     A few of the sources i looked at also ran into this problem. they suggested i view the following website for guidance:\n    https://stackoverflow.com/questions/50445512/react-native-invariant-violation-maximum-update-depth-exceeded */\n\n    if (this.state.createdArray === false) {\n      //Multiply side by itself\n      let size = side * side;\n\n      // Create empty array\n      let array;\n\n      //Temporary clone of Blocks\n      array = this.state.Blocks.slice();\n\n      //create empty object\n      let object = {};\n\n      //Place each object on the board using a for loop\n      for (let i = 1; i <= size; i++) {\n        //Add numberHint of \"1\" to these blocks\n        if (i === 0 || i === 1 || i === 3 || i === 6 || i === 11 || i === 12 || i === 16 || i === 21 || i === 22 || i === 26 || i === 27 || i === 31 || i === 32 || i === 37 || i === 41 || i === 42 || i === 47 || i === 50 || i === 52 || i === 53 || i === 57 || i === 58 || i === 59) {\n          object = {\n            id: i,\n            blockStatus: \"normal\",\n            mineStatus: false,\n            flagStatus: false,\n            numberHint: 1,\n            emptyBlockSection: 0\n          };\n          array.push(object);\n\n          //Add numberHint of \"2\" to these blocks\n        } else if (i === 5 || i === 10 || i === 13 || i === 15 || i === 18 || i === 20 || i === 23 || i === 25 || i === 28 || i === 30 || i === 33 || i === 35 || i === 38 || i === 40 || i === 43 || i === 48) {\n          object = {\n            id: i,\n            blockStatus: \"normal\",\n            mineStatus: false,\n            flagStatus: false,\n            numberHint: 2,\n            emptyBlockSection: 0\n          };\n          array.push(object);\n\n          //Add mines where no hints are shown    \n        } else {\n          //mineStatus = true\n          if (i === 4 || i === 9 || i === 14 || i === 19 || i === 24 || i === 29 || i === 34 || i === 39 || i === 44 || i === 49) {\n            object = {\n              id: i,\n              blockStatus: \"normal\",\n              mineStatus: true,\n              flagStatus: false,\n              numberHint: 0,\n              emptyBlockSection: 0\n            };\n            array.push(object);\n\n            //If no mines, and no hints, make empty/blank blocks\n          } else {\n            //Place these in \"emptyblocksection 1\"\n            if (i === 7 || i === 8 || i === 17) {\n              object = {\n                id: i,\n                blockStatus: \"normal\",\n                mineStatus: false,\n                flagStatus: false,\n                numberHint: 0,\n                emptyBlockSection: 1\n              };\n              array.push(object);\n\n              //Place these in \"emptyblocksection 2\"\n            } else {\n              object = {\n                id: i,\n                blockStatus: \"normal\",\n                mineStatus: false,\n                flagStatus: false,\n                numberHint: 0,\n                emptyBlockSection: 2\n              };\n              array.push(object);\n            }\n          }\n        }\n      }\n\n      //New variable with value true. I will use it to change value of \"createdArray\"\n      let state = true;\n\n      //New variable to update GameStatus\n      let msg = \"On Going\";\n\n      //Update state variables\n      this.setState({\n        Blocks: array,\n        createdArray: state,\n        boardSize: size,\n        gameStatus: msg\n      }, () => {\n        console.log(\"newArray function has run.\");\n      });\n    }\n  }\n\n  /*Use array values to create a div for the game board with each value. Gives each div a unique ID\n   and passes the index of each block to the \"placeFlag\" function to be used when the user clicks on a block. */\n\n  displayBoard(side) {\n    if (this.state.blockArray.length === 0 || this.state.blockArray === null || this.state.gameStatus === \"new game\") {\n      //clone blockArray\n      let tempArray = [];\n\n      // \"side\"represents the number of blocks on each side of the game board\n      let size = side * side;\n\n      //New array with numbers 1 to \"size\"\n      for (let j = 0; j <= size - 1; j++) {\n        tempArray.push(j);\n      }\n\n      // Use map navigate through each element in array and add the div for each block to \"board\"\n      //key = id\n      let board = tempArray.map(element =>\n      /*#__PURE__*/\n      //when user right clicks, add a flag to the block instead of showing the context menu\n      _jsxDEV(\"div\", {\n        className: \"block normalBlock\",\n        id: element,\n        onClick: () => this.revealedBlock(element),\n        onContextMenu: e => {\n          e.preventDefault();\n          this.placeFlag(element);\n        },\n        children: element + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 17\n      }, this));\n      if (this.state.gameStatus === \"new game\") {\n        let msg = \"On Going\";\n        this.setState({\n          gameStatus: msg\n        }, () => console.log(\"won or lost msg reset to 'On Going'\"));\n      }\n\n      //Update blockArray\n      this.setState({\n        blockArray: board\n      }, () => {\n        console.log(\"Displayboard function has run and blockArray was updated\");\n        console.log(\"createdArray status is: \" + this.state.createdArray);\n        this.getScore();\n      });\n    }\n  }\n  getScore() {\n    let numArray = [0, 0];\n    let Blocks = this.state.Blocks;\n    let numberOfFlags = 0;\n    let numberOfMines = 0;\n    let size = this.state.boardSize;\n\n    //Display number of blocks with flags and number with mines\n    for (let i = 0; i <= size; i++) {\n      if (Blocks[i].flagStatus === true) {\n        numberOfFlags++;\n      }\n      if (Blocks[i].mineStatus === true) {\n        numberOfMines++;\n      }\n    }\n    this.setState({\n      Flags: numberOfFlags,\n      Mines: numberOfMines\n    }, () => {\n      console.log(\"Status of Flags and Mines updated\");\n      numArray[0] = this.state.Flags;\n      numArray[1] = this.state.Mines;\n      this.setState({\n        gameScoreArray: numArray\n      }, () => console.log(\"gameScoreArray is: \" + this.state.gameScoreArray));\n    });\n  }\n\n  //game reset\n  resetGame(Blocks, msg) {\n    this.setState({\n      gameStatus: msg,\n      Blocks: Blocks\n    }, () => {\n      console.log(\"Game reset.\");\n      this.displayBoard(9);\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"MainGame\",\n        children: [this.newArray(9), this.displayBoard(9), this.state.blockArray]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GameStatus, {\n        resetGame: this.resetGame,\n        message: this.state.gameStatus,\n        Blocks: this.state.Blocks,\n        createdArray: this.state.createdArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(Scoreboard, {\n        score: this.state.gameScoreArray,\n        resetGame: this.resetGame,\n        gameState: this.state.gameStatus,\n        Blocks: this.state.Blocks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n// Export component so it can be used by App.js\nexport default MainGame;","map":{"version":3,"names":["React","Flag","Mine","Number1","Number2","Scoreboard","GameStatus","MainGame","Component","constructor","props","state","boardSize","Flags","Mines","gameScoreArray","gameStatus","createdArray","Blocks","id","blockStatus","mineStatus","flagStatus","numberHint","emptyBlockSection","blockArray","revealedBlock","bind","placeFlag","newArray","displayBoard","getScore","resetGame","isNumberHint1","isNumberHint2","isMine","hasWon","arraysEqual","index","tempArray","e","preventDefault","winOrLose","setState","console","log","isEmptyBlock","slice","array1","array2","i","length","arrayOfMines","array","map","item","winningArrayTemplate","filter","includes","pop","exposedBlocksArray","exposedBlockIdArray","result","msg","side","size","object","push","j","board","element","numArray","numberOfFlags","numberOfMines","render"],"sources":["J:/capstoneProject3-main (1)/capstoneProject3-main (1)/Flags_Mines/src/Components/MainGame.js"],"sourcesContent":["import React from 'react';\n\n//Import images\nimport Flag from '../redFlag.png';\nimport Mine from '../mineImg.png';\nimport Number1 from '../number1.png';\nimport Number2 from '../number2.png';\n\n//Import components\nimport Scoreboard from './Scoreboard';\nimport GameStatus from './GameStatus';\n\n/*I used multiple github repositories as well as videos and google to help me with this project. Most sources had the same basic structure,\n but the way they impimented the functions etc. was a bit confusing. I did my best to re-create this in a way that made sense to me and that met all the task requirments*/\n\n\n//Create function to display game board\nclass MainGame extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        //Initial state variables\n        this.state = {\n            boardSize: 0,\n            Flags: 0,\n            Mines: 0,\n            gameScoreArray: 0,\n            gameStatus: \"On Going\",\n            createdArray: false,\n\n            // Blocks is an array of blocks on the board.\n            Blocks: [{\n                id: 0,\n                blockStatus: \"normal\",\n                mineStatus: false,\n                flagStatus: false,\n                numberHint: 0,\n                emptyBlockSection: 0\n            }],\n\n            // blockArray contains the code for each block on the game board.\n            blockArray: []\n        };\n          //Binding for each function so that \"this\" works correctly\n          this.revealedBlock = this.revealedBlock.bind(this);\n          this.placeFlag = this.placeFlag.bind(this);\n          this.newArray = this.newArray.bind(this);\n          this.displayBoard = this.displayBoard.bind(this);\n          this.getScore = this.getScore.bind(this);\n          this.resetGame = this.resetGame.bind(this);\n          this.isNumberHint1 = this.isNumberHint1.bind(this);\n          this.isNumberHint2 = this.isNumberHint2.bind(this);\n          this.isMine = this.isMine.bind(this);\n          this.hasWon = this.hasWon.bind(this);\n          this.arraysEqual = this.arraysEqual.bind(this);\n    }\n\n    //If the clicked block has a mine, show the icon of the mine\n    isMine(index, newArray, tempArray) {\n\n        //Change status of block that was clicked on to \"exposed\" in temp array\n        newArray[index].blockStatus = \"exposed\";\n\n        tempArray[index] = \n        <div className=\"block uncovered\" \n            id={index} \n            onClick={() => this.revealedBlock(index)} \n            onContextMenu={(e) => {e.preventDefault(); this.placeFlag(index)}}>\n                <img className=\"mine\" src={Mine} alt=\"Mine / bomb\" />\n        </div>;\n        \n        //\"Game over\" message\n        let winOrLose = \"Game Over!\";\n\n        this.setState(\n            {Blocks: newArray, \n                blockArray: tempArray, \n            gameStatus: winOrLose}, \n            () => {console.log(\"blockArray and Blocks item index '\" + index + \"' updated with mine\");\n        \n        }); \n\n    }\n\n    //Showing number hints\n\n    isNumberHint1(index, newArray, tempArray) {\n\n        //Change status of block that was clicked on to \"exposed\" in temp array\n        newArray[index].blockStatus = \"exposed\";\n\n        //If clicked, show image of the \"1\"\n        tempArray[index] = \n        <div className=\"block uncovered\" \n            id={index} \n            onClick={() => this.revealedBlock(index)} \n            onContextMenu={(e) => {e.preventDefault(); this.placeFlag(index)}}>\n            {<img className=\"num1\" src={Number1} alt=\"number 1\" />}\n        </div>;\n            \n        this.setState({\n            blockArray: tempArray, \n            Blocks: newArray}, \n            () => console.log(\"blockArray item index '\" + index + \"' updated with number hint\")\n        );  \n\n    }\n    isNumberHint2(index, newArray, tempArray) {\n    \n        //Change status of block that was clicked on to \"exposed\" in temp array\n        newArray[index].blockStatus = \"exposed\";\n\n        //If clicked, show image of the \"2\"\n        tempArray[index] = \n        <div className=\"block uncovered\" \n        id={index} \n        onClick={() => this.revealedBlock(index)} \n        onContextMenu={(e) => {e.preventDefault(); this.placeFlag(index)}}>\n            {<img className=\"num2\" src={Number2} alt=\"number 2\" />}\n        </div>;\n            \n        this.setState(\n            {blockArray: tempArray, \n                Blocks: newArray}, \n            () => console.log(\"blockArray and Blocks item index '\" + index + \"' updated\")); \n    \n    }\n\n\n    //If there is no hint under the clicked block, show blank\n    isEmptyBlock(index, newArray, tempArray) {\n\n        //Change status of block that was clicked on to \"exposed\" in temp array\n        newArray[index].blockStatus = \"exposed\";\n\n        //If clicked, show blank\n        tempArray[index] = \n        <div className=\"block uncovered\" \n            id={index} \n            onClick={() => this.revealedBlock(index)} \n            onContextMenu={(e) => {e.preventDefault(); this.placeFlag(index)}}>\n                &nbsp;\n        </div>;\n\n        this.setState(\n            {blockArray: tempArray,\n                Blocks: newArray}, \n            () => console.log(\"blockArray item index '\" + index + \"' updated\")\n        ); \n\n    }\n\n    //Exposing what is underneath a block when the user clicks on it\n\n    revealedBlock(index) {\n\n        //Show game status.\n        if (this.state.gameStatus === \"On Going\") {\n\n            // use slice() to clone Blocks (array with all info about each block)\n            let newArray = this.state.Blocks.slice();\n\n            // Use slice() to clone blockArray (array that has code for each block) to work on\n            let tempArray = this.state.blockArray.slice();\n\n            //First, check if there is a mine under the block, if not it is safe to continue\n            if (!this.state.Blocks[index].mineStatus) {\n\n                //Reveal what is under each block (refer to functions above)\n                if (this.state.Blocks[index].numberHint === 1) {\n\n                    this.isNumberHint1(index, newArray, tempArray);\n                  \n                } else {\n                    \n                    if (this.state.Blocks[index].numberHint === 2) {\n\n                        this.isNumberHint2(index, newArray, tempArray);\n\n                    } else {\n\n                        this.isEmptyBlock(index, newArray, tempArray); \n                    } \n                \n                }\n            \n              //If there is a mine under the clicked block, show the mine\n            } else {\n\n                this.isMine(index, newArray, tempArray);\n            }\n        \n        //Update the game status to won or lost\n        this.hasWon();\n        }\n    }\n\n    /* This function checks if the 2 arrays that are passed to it as parameters are equal (have all identical values).\n    I learned this from one of the github projects i used for guidance*/\n\n    arraysEqual(array1, array2) {\n\n        for (let i = 0; i < array2.length; i++) {\n            if (array1[i] !== array2[i]) return false;\n        }\n\n        return true;\n    };\n\n    //Function to determine if the player has won or lost\n    hasWon() {\n\n        let Blocks = this.state.Blocks;\n\n        //Array with all mines\n        let arrayOfMines = [4, 9, 14, 19, 24, 29, 34, 39, 44, 49];\n\n        //Array for all blocks\n        let array = Blocks.map(item => \n            {return item.id} \n        );\n\n        //Array for all 'safe' blocks that have no mines underneath\n        let winningArrayTemplate = array.filter(item => !arrayOfMines.includes(item));\n    \n        //Use pop to remove last element from array\n        winningArrayTemplate.pop();\n\n        //Array for all exposed blocks\n        let exposedBlocksArray = Blocks.filter((item) => \n                {return item.blockStatus === \"exposed\"}\n            );\n        \n        //Only show exposed blocks in array\n        let exposedBlockIdArray = exposedBlocksArray.map((item) => item.id);\n        \n        let result = false;\n        result = this.arraysEqual(exposedBlockIdArray, winningArrayTemplate);\n\n        console.log(\"result of comparison is: \" + result);\n\n        // If array of exposed blocks equals winning array, show the player that they won\n        if (result === true) { \n            let msg = \"You Won the Game!\"; \n\n            this.setState(\n                {gameStatus: msg}, \n                () => {console.log(\"Won or lost msg updated to: \" + this.state.gameStatus);\n                \n            }); \n        } \n\n    }\n\n    //Flag placement\n    placeFlag(index) {\n\n        //Only allow the player to keep clicking if the game status is on going \n        if (this.state.gameStatus === \"On Going\") {\n\n            //Temporary clone of Blcoks\n            let newArray = this.state.Blocks.slice();\n\n            //Flag status\n            newArray[index].flagStatus = true;\n            \n            //Temporary clone of blockArray\n            let tempArray = this.state.blockArray.slice();\n\n            //Show flag image\n            tempArray[index] = \n                <div className=\"block normalBlock\" \n                    id={index} \n                    onClick={() => this.revealedBlock(index)} \n                    onContextMenu={(e) => {e.preventDefault(); this.placeFlag(index)}}>\n                        <img className=\"flag\" src={Flag} alt=\"red flag\"/>\n            </div>;\n                \n            this.setState(\n                {Blocks: newArray, \n                    blockArray: tempArray}, \n                () => {console.log(\"blockArray item index '\" + index + \"' updated with flag and Blocks updated.\");\n                this.getScore();\n            }); \n\n        }\n\n    }   \n\n    // Function to create array that stores the values of each block on the board.\n    newArray(side) {\n\n        /*Here I was getting an error that said: \n        \"Error: Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate\".\n\n        A few of the sources i looked at also ran into this problem. they suggested i view the following website for guidance:\n        https://stackoverflow.com/questions/50445512/react-native-invariant-violation-maximum-update-depth-exceeded */\n        \n        if (this.state.createdArray === false) {\n\n            //Multiply side by itself\n            let size = side * side;\n\n            // Create empty array\n            let array;\n\n            //Temporary clone of Blocks\n            array = this.state.Blocks.slice();\n\n            //create empty object\n            let object = {};\n\n            //Place each object on the board using a for loop\n            for (let i = 1; i <= size; i++) {\n\n                //Add numberHint of \"1\" to these blocks\n                if (i === 0 || i === 1 || i === 3 || i === 6 || i === 11 || i === 12 || i === 16 || i === 21 \n                    || i === 22 || i === 26 || i === 27 || i === 31 || i === 32 || i === 37 || i === 41 || \n                    i === 42 || i === 47 || i === 50 || i === 52 || i === 53 || i === 57 || i === 58 || i === 59) {\n                    object = {id: i, blockStatus: \"normal\", mineStatus: false, flagStatus: false, numberHint: 1,\n                    emptyBlockSection: 0};\n                    array.push(object);\n\n                //Add numberHint of \"2\" to these blocks\n                } else if (i === 5 || i === 10 || i === 13 || i === 15 || i === 18 || i === 20 || i === 23 ||\n                    i === 25 || i === 28 || i === 30 || i === 33 || i === 35 || i === 38 || i === 40 || \n                    i === 43 || i === 48) {\n                    object = {id: i, blockStatus: \"normal\", mineStatus: false, flagStatus: false, numberHint: 2,\n                    emptyBlockSection: 0};\n                    array.push(object);\n\n                //Add mines where no hints are shown    \n                } else {\n\n                    //mineStatus = true\n                    if (i === 4 || i === 9 || i === 14 || i === 19 || i === 24 || i === 29 || i === 34 || i === 39\n                        || i === 44 || i === 49) {\n                    \n                        object = {id: i, blockStatus: \"normal\", mineStatus: true, flagStatus: false, numberHint: 0,\n                        emptyBlockSection: 0};\n                        array.push(object);\n\n                    //If no mines, and no hints, make empty/blank blocks\n                    }  else {\n\n                        //Place these in \"emptyblocksection 1\"\n                        if (i === 7 || i === 8 || i === 17) {\n                            object = {id: i, blockStatus: \"normal\", mineStatus: false, flagStatus: false, \n                            numberHint: 0, emptyBlockSection: 1};\n                            array.push(object);\n                            \n                        //Place these in \"emptyblocksection 2\"\n                        } else {\n                            object = {id: i, blockStatus: \"normal\", mineStatus: false, flagStatus: false, \n                            numberHint: 0, emptyBlockSection: 2};\n                            array.push(object);\n                        }\n                    }\n                }\n            } \n\n            //New variable with value true. I will use it to change value of \"createdArray\"\n            let state = true;\n\n            //New variable to update GameStatus\n            let msg = \"On Going\";\n\n            //Update state variables\n            this.setState({\n                Blocks: array, \n                createdArray: state, \n                boardSize: size,\n                gameStatus: msg\n            }, () => {\n                console.log(\"newArray function has run.\");\n                \n            }); \n        }\n    }\n\n    /*Use array values to create a div for the game board with each value. Gives each div a unique ID\n     and passes the index of each block to the \"placeFlag\" function to be used when the user clicks on a block. */\n\n    displayBoard(side) {\n\n        if (this.state.blockArray.length === 0 || this.state.blockArray === null || this.state.gameStatus === \"new game\") {\n            //clone blockArray\n            let tempArray = [];\n\n            // \"side\"represents the number of blocks on each side of the game board\n            let size = side * side;\n            \n            //New array with numbers 1 to \"size\"\n            for (let j = 0; j <= size - 1; j++) {\n                tempArray.push(j);\n            }\n\n            // Use map navigate through each element in array and add the div for each block to \"board\"\n            //key = id\n            let board = tempArray.map((element) => \n                //when user right clicks, add a flag to the block instead of showing the context menu\n                <div className=\"block normalBlock\" id={element} onClick={() => this.revealedBlock(element)} onContextMenu={(e) => {e.preventDefault(); this.placeFlag(element)}}>{element + 1}</div>\n\n            );\n\n            if (this.state.gameStatus === \"new game\") {\n                let msg = \"On Going\";\n                this.setState({gameStatus: msg}, () => console.log(\"won or lost msg reset to 'On Going'\"));\n            }\n\n            //Update blockArray\n            this.setState({blockArray: board}, () => {\n                console.log(\"Displayboard function has run and blockArray was updated\");\n                console.log(\"createdArray status is: \" + this.state.createdArray);\n                this.getScore();\n            });\n        }\n    }\n\n    getScore() {\n        \n        let numArray = [0, 0];\n        let Blocks = this.state.Blocks;\n        let numberOfFlags = 0;\n        let numberOfMines = 0;\n        let size = this.state.boardSize;\n\n        //Display number of blocks with flags and number with mines\n        for (let i = 0; i <= size; i++) {\n\n            if (Blocks[i].flagStatus === true) {\n                numberOfFlags++;\n            }\n\n            if (Blocks[i].mineStatus === true) {\n                numberOfMines++;\n            }\n\n        } \n\n        this.setState({Flags: numberOfFlags, Mines: numberOfMines}, () => {\n            console.log(\"Status of Flags and Mines updated\");\n\n            numArray[0] = this.state.Flags;\n            numArray[1] = this.state.Mines;\n\n            this.setState({gameScoreArray: numArray}, () => console.log(\"gameScoreArray is: \" + this.state.gameScoreArray));\n        });\n        \n    }\n\n    //game reset\n    resetGame(Blocks, msg) {\n        this.setState({\n            gameStatus: msg, \n            Blocks: Blocks\n\n        }, () => {\n            console.log(\"Game reset.\");\n            this.displayBoard(9);\n        });\n    }\n\n   \n    render() {\n        return (\n            <div className=\"Game\">\n                \n                <div className=\"MainGame\">\n                    {this.newArray(9)}\n                    {this.displayBoard(9)}\n                    {this.state.blockArray}\n                </div>\n\n                {<GameStatus \n                    resetGame={this.resetGame} \n                    message={this.state.gameStatus} \n                    Blocks= {this.state.Blocks} \n                    createdArray = {this.state.createdArray} />}\n                \n                {<Scoreboard \n                    score={this.state.gameScoreArray} \n                    resetGame={this.resetGame} \n                    gameState={this.state.gameStatus} \n                    Blocks= {this.state.Blocks} />}\n\n               \n\n            </div>\n\n        );\n\n    }\n\n}\n\n// Export component so it can be used by App.js\nexport default MainGame;"],"mappings":"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"},"metadata":{},"sourceType":"module"}